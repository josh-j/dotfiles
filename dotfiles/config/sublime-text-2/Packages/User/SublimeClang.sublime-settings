{
        // Whether or not fast completions are enabled. Usually you'd put
    // "sublimeclang_enable_fast_completions": false, in the project
    // settings if it's problematic in that project. You can also
    // runtime toggle fast completions alt+d,alt+f, however if it
    // is disabled for the current project (or globally in your
    // user settings) it will not be enabled. In other words
    // this setting, when set to false, overrides whatever the
    // keyboard toggle is set to.
    "enable_fast_completions": true,

    "reparse_on_activated": false,

    "hide_output_when_empty": true,

    // Whether or not to automatically show the output panel.
    // If set to false, the default key-binding alt+d,alt+p
    // will show it
    "show_output_panel": false,

     // When set to true, the output panel will be updated with the active
    // view's errors/warnings as it is switched to. If set to false you will
    // have to switch to the view you want to get the errors/warnings for
    // and press alt+d,alt+f to hide and then display the panel for it
    // to refresh its contents
    "update_output_panel": true,

    "additional_language_options":
    {
        // For example, you can use "c++": ["-std=c++11"] to enable C++11 features.
        "c++" : ["-std=c++11", "-Wno-microsoft", "-Wno-typename-missing", "-Wno-comment", "-Wno-invalid-token-paste"],
        "c": [],
        "objc": [],
        "objc++": []
    },
    //clang main.cpp -std=c++11 -I"C:/MinGW/lib/gcc/mingw32/4.7.0/include" -I"C:/MinGW/lib/gcc/mingw32/4.7.0/include/c++" -I"C:/MinGW/lib/gcc/mingw32/4.7.0/include/c++/mingw32" -I"C:/MinGW/include" -I"C:/Program Files (x86)/boost_1_51_0" 
    "options":
    [
        "-ferror-limit=0",
        "-isystem", "C:/MinGW/lib/gcc/mingw32/4.7.0/include",
        "-isystem", "C:/MinGW/lib/gcc/mingw32/4.7.0/include/c++",
        "-isystem", "C:/MinGW/lib/gcc/mingw32/4.7.0/include/c++/mingw32",
        "-isystem", "C:/MinGW/include",
        "-isystem", "C:/Program Files (x86)/boost_1_51_0",
        "-Wall"
    ],

    // If set to true, it'll not prepend the compiler options with the path to the
    // included headers
    "dont_prepend_clang_includes": false,


    // All diagnostic errors from files in these directories or below will be ignored
    "diagnostic_ignore_dirs":
    [
        "C:/MinGW/",
        "C:/Program Files (x86)/boost_1_51_0",
        "C:/Users/sio/AppData/Roaming/Sublime Text 2/Packages/SublimeClang"
    ],

    // Diagnostic errors/warnings matching this regex pattern will be ignored
    "diagnostic_ignore_regex": "pragma once in main file"
}
